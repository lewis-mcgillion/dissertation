#Cleaning script from github
tdf_winners <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-07/tdf_winners.csv')
devtools::install_github("thebioengineer/tidytuesdayR")
devtools::install_github("alastairrushworth/tdf")
tuesdata <- tidytuesdayR::tt_load('2020-04-07')
tuesdata <- tidytuesdayR::tt_load(2020, week = 15)
tdf_winners <- tuesdata$tdf_winners
tdf_stages <- tuesdata$tdf_stages
stage_data <- tuesdata$stage_data
library(tidyverse)
library(tdf) # install at: https://github.com/alastairrushworth/tdf
winners <- tdf::editions %>%
select(-stage_results)
all_years <- tdf::editions %>%
unnest_longer(stage_results) %>%
mutate(stage_results = map(stage_results, ~ mutate(.x, rank = as.character(rank)))) %>%
unnest_longer(stage_results)
stage_all <- all_years %>%
select(stage_results) %>%
flatten_df()
combo_df <- bind_cols(all_years, stage_all) %>%
select(-stage_results)
stage_clean <- combo_df %>%
select(edition, start_date,stage_results_id:last_col()) %>%
mutate(year = lubridate::year(start_date)) %>%
rename(age = age...25) %>%
select(edition, year, everything(), -start_date)
#                      #
#my own cleaning script#
#                      #
#          #
#REGRESSION#
#          #
#getting data together for regression dataset
#getting finish times of stages
winnertimes <- stage_clean[stage_clean$rank == '1',]
#removing data before 1980 and after 2017
post1980winnertimes<-subset(winnertimes, year<2018 & year>1979)
post1980winnertimes<- subset(post1980winnertimes, select = c(year, stage_results_id, elapsed))
post1980winnertimes$year<-as.numeric(post1980winnertimes$year)
#renaming columns
names(post1980winnertimes)[names(post1980winnertimes)=="stage_results_id"] <- "Stage"
names(post1980winnertimes)[names(post1980winnertimes)=="year"] <- "Year"
#converting stage number to just a number using strsplit, converting to matrix and getting second element
split<-stringi::stri_list2matrix(str_split(post1980winnertimes$Stage, pattern='stage-', n=2))
post1980winnertimes$Stage<-split[2,]
#tdf stages
#adding column with just the year
tdf_stages_new<-tdf_stages
tdf_stages_new$Year<-as.numeric(format(tdf_stages_new$Date, format = "%Y"))
#removing data before 1980 (data after 2017 is non existent in this)
post1980tdfstages<-subset(tdf_stages_new, Year>1979)
post1980tdfstages<-subset(post1980tdfstages, select = c(Stage, Year, Date, Origin, Distance, Destination, Type))
#changing prologue P to stage number 0, just to make it easier to merge
post1980tdfstages$Stage[post1980tdfstages$Stage == 'P'] <-0
#merging both tables
final_stages<-merge(x= post1980winnertimes, y=post1980tdfstages, by=c("Year","Stage"))
#some stages contain the suffix 'a', 'b' etc which is changed to '.1', '.2'
tempStages<-final_stages$Stage
tempStages<-gsub("a", ".1", tempStages)
tempStages<-gsub("b", ".2", tempStages)
#inserting back in to final stages
final_stages$Stage<-tempStages
#changing column to numeric to allow ordering
final_stages$Stage<- as.numeric(as.character(final_stages$Stage))
#ordering by year and stage
final_stages<-final_stages[order(final_stages$Year, final_stages$Stage),]
#normalising stage names
final_stages$Type[final_stages$Type == 'Individual time trial'] <-0
final_stages$Type[final_stages$Type == 'Flat stage' | final_stages$Type =='Plain stage' | final_stages$Type =='Plain stage with cobblestones' | final_stages$Type =='Flat cobblestone stage'] <-1
final_stages$Type[final_stages$Type == 'Medium mountain stage' | final_stages$Type =='Transition stage' | final_stages$Type =='Intermediate stage' | final_stages$Type =='Hilly stage'] <-2
final_stages$Type[final_stages$Type == 'High mountain stage' | final_stages$Type =='Mountain stage' | final_stages$Type =='Stage with mountain(s)' | final_stages$Type =='Mountain Stage' | final_stages$Type == 'Mountain time trial'] <-3
#removing team time trial stages
final_stages<-subset(final_stages, Type!="Team time trial")
#Changing time to seconds
final_stages$elapsed<-period_to_seconds(final_stages$elapsed)
#creating average speed column
final_stages$Average_speed = (final_stages$Distance / final_stages$elapsed) * 3600
#Removing irrational average speeds since some of the data is incorrect
final_stages<-subset(final_stages, Average_speed>20 & Average_speed<56)
#saving regression data as csv
write.csv(final_stages, 'tdf_stages_regression.csv')
#              #
#CLASSIFICATION#
#              #
#acquiring classification dataset by modifying 'stage_clean'
#same date range as regression dataset, 1980 to present, 2017 in this case
stage_clean_new<-subset(stage_clean, year<2018 & year>1979)
#dropping un-needed columns
#keeping team names in case they are useful
stage_clean_new<-subset(stage_clean_new, select = c(year, stage_results_id,rank, rider, age, elapsed))
#removing 'stage' prefix from stage number
split<-stringi::stri_list2matrix(str_split(stage_clean_new$stage_results_id, pattern='stage-', n=2))
stage_clean_new$stage_results_id<-split[2,]
#some stages contain the suffix 'a', 'b' etc which is changed to '.1', '.2'
tempStages<-stage_clean_new$stage_results_id
tempStages<-gsub("a", ".1", tempStages)
tempStages<-gsub("b", ".2", tempStages)
#inserting back
stage_clean_new$stage_results_id<-tempStages
#changing column to numeric to allow ordering
stage_clean_new$stage_results_id<- as.numeric(as.character(stage_clean_new$stage_results_id))
#renaming columns
names(stage_clean_new)[names(stage_clean_new) == "year"]<- "Year"
names(stage_clean_new)[names(stage_clean_new) == "stage_results_id"]<- "Stage"
#adding stage type column
#getting year, stage and type from final_stages
stageType<-subset(final_stages, select = c(Year, Stage, Type))
#merging with stage type
classification_final<-merge(stageType, stage_clean_new, by=c("Year", "Stage"))
#changing data type so order works correctly
classification_final$rank<-as.numeric(as.character(classification_final$rank))
classification_final$Year<-as.numeric(as.character(classification_final$Year))
#ordering data by year and stage
classification_final<-classification_final[order(classification_final$Year, classification_final$Stage),]
#writing classification data as csv
write.csv(classification_final, 'tdf_stages_classification.csv')
